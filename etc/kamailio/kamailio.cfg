#!KAMAILIO
#

##!define WITH_DEBUG
#!define WITH_MORELOGGING
#!define WITH_MYSQL
#!define WITH_TLS
#!define WITH_HOMER
#!define WITH_ANTIFLOOD

#!substdef "!MY_IP_ADDR!XXX-XXX!g"
#!substdef "!MY_DOMAIN!XXXX-XXXX!g"

# *** Value defines - IDs used later in config
#!ifdef WITH_MYSQL
# - database URL - used to connect to database server by modules such
#       as: auth_db, acc, usrloc, a.s.o.
#!ifndef DBURL
#!define DBURL "mysql://kamailio:kamailiorw@localhost/kamailio"
#!endif
#!endif

# - flags
#   FLT_ - per transaction (message) flags
#	FLB_ - per branch flags
#!define FLT_NATS 5

#!define FLB_NATB 6
#!define FLB_NATSIPPING 7

####### Global Parameters #########

### LOG Levels: 3=DBG, 2=INFO, 1=NOTICE, 0=WARN, -1=ERR
#!ifdef WITH_DEBUG
debug=4
log_stderror=no
#!else
debug=2
log_stderror=no
#!endif

memdbg=5
memlog=5

log_facility=LOG_LOCAL3


use_dns_cache=off            # Use KAMAILIO internal DNS cache
## dns_cache_init=no
# use_dns_failover=on      # Depends on KAMAILIO internal DNS cache
# dns_srv_loadbalancing=on      #
# dns_try_naptr=on            #
dns_try_ipv6=no
dns_retr_time=1          # Time in seconds before retrying a DNS request
dns_retr_no=3              # Number of DNS retransmissions before giving up

# Set protocol preference order - ignore target priority
dns_naptr_ignore_rfc= yes       # Ignore target NAPTR priority
dns_tls_pref=50          # First priority: TLS
dns_tcp_pref=30          # Second priority: TCP
dns_udp_pref=10          # Third priority: UDP

auto_aliases=no

/* port to listen to
 * - can be specified more than once if needed to listen on many ports */

#!ifdef WITH_TLS
enable_tls=yes
listen=tls:MY_IP_ADDR:5064
#!endif

listen=tcp:MY_IP_ADDR:5065
listen=udp:MY_IP_ADDR:5065

tcp_connection_lifetime=3604

####### Custom Parameters #########

server_header="Server: SkypeGW"
server_signature=no
user_agent_header="User-Agent: SkypeGW"


# set paths to location of modules (to sources or installation folders)
#!ifdef WITH_SRCPATH
mpath="modules/"
#!else
mpath="/usr/lib/x86_64-linux-gnu/kamailio/modules/"
#!endif

#!ifdef WITH_DEBUG
loadmodule "debugger.so"
#!endif

#!ifdef WITH_MYSQL
loadmodule "db_mysql.so"
#!endif

loadmodule "kex.so"
loadmodule "tm.so"
loadmodule "tmx.so"
loadmodule "sl.so"
loadmodule "rr.so"
loadmodule "topos.so"
loadmodule "pv.so"
loadmodule "maxfwd.so"
loadmodule "textops.so"
loadmodule "siputils.so"
loadmodule "xlog.so"
loadmodule "sanity.so"
loadmodule "ctl.so"
loadmodule "sdpops.so"
loadmodule "textopsx.so"
loadmodule "rtpengine.so"
loadmodule "sqlops.so"
loadmodule "permissions.so"
loadmodule "dispatcher.so"
loadmodule "nathelper.so"
loadmodule "uac.so"
loadmodule "htable.so"
loadmodule "carrierroute.so"

#!ifdef WITH_TLS
loadmodule "tls.so"
#!endif

#!ifdef WITH_HOMER
loadmodule "siptrace.so"
#!endif

#!ifdef WITH_ANTIFLOOD
loadmodule "pike.so"
#!endif

# ----------------- setting module-specific parameters ---------------

# ----- don't drop sanity check faults --------
modparam("sanity", "autodrop", 0)

# ----- tm params -----
# auto-discard branches from previous serial forking leg
modparam("tm", "failure_reply_mode", 3)
# default retransmission timeout: 30sec
modparam("tm", "fr_timer", 2000)
# default invite retransmission timeout after 1xx: 120sec
# Default timeout in KAMAILIO is 120 sec. Don't timeout before provider!
#modparam("tm", "fr_inv_timer", 32000)
#Set text of the automatically send 100 to an INVITE.
modparam("tm", "auto_inv_100_reason", "Trying")

# SQL to local DB
modparam("sqlops","sqlcon","ca=>mysql://kamailio:kamailiorw@localhost/kamailio")
modparam("sqlops", "sqlres", "ra")

# ----- rr params -----
# add value to ;lr param to cope with most of the UAs
modparam("rr", "enable_full_lr", 0)
# do not append from tag to the RR (no need for this script)
modparam("rr", "append_fromtag", 1)

# ------ topology hiding -----------------
modparam("topos", "db_url", DBURL)
modparam("topos", "mask_callid", 0)
modparam("topos", "sanity_checks", 1)

modparam("permissions", "db_url", DBURL)
modparam("permissions", "db_mode", 1)

#  ---- Dispatcher ---
modparam("dispatcher", "db_url", DBURL)
modparam("dispatcher", "flags", 2)			       # Flag = 2 -> Failover support
modparam("dispatcher", "force_dst", 1)  # Force destination rewrite
modparam("dispatcher", "dst_avp", "$avp(AVP_DST)")
modparam("dispatcher", "grp_avp", "$avp(AVP_GRP)")
modparam("dispatcher", "cnt_avp", "$avp(AVP_CNT)")
modparam("dispatcher", "attrs_avp",  "$avp(AVP_ATTRS)")
modparam("dispatcher", "sock_avp", "$avp(dssocket)")
modparam("dispatcher", "ds_ping_method", "OPTIONS")
modparam("dispatcher", "ds_probing_mode", 1)		     # 1 = Test all gateways
modparam("dispatcher", "ds_probing_threshold", 2)	      # No req before active->probe
modparam("dispatcher", "ds_ping_interval", 120)		   # Seconds between pinging inactive
modparam("dispatcher", "ds_ping_from", "sip:ping@XXXX-XXXX") # From-address of OPTIONS pings

# ------ Carrierroute ------
modparam("carrierroute", "config_source", "db")
modparam("carrierroute", "db_url", DBURL)
modparam("carrierroute", "default_tree", "skype")
modparam("carrierroute", "fetch_rows", 85000)
modparam("carrierroute", "match_mode", 128)

# ----- rtpengine params -----
modparam("rtpengine", "rtpengine_sock", "udp:127.0.0.1:22222")

#!ifdef WITH_TLS
# ----- tls params -----
modparam("tls", "config", "/etc/kamailio/tls.cfg")
#!endif

#!ifdef WITH_HOMER
#Siptrace
modparam("siptrace", "duplicate_uri", "sip:127.0.0.1:9060")
modparam("siptrace", "hep_mode_on", 1)
modparam("siptrace", "trace_to_database", 0)
modparam("siptrace", "trace_flag", 22)
modparam("siptrace", "trace_on", 1)
#!endif

#!ifdef WITH_ANTIFLOOD
# ----- pike params -----
modparam("pike", "sampling_time_unit", 10)
modparam("pike", "reqs_density_per_unit", 30)
modparam("pike", "remove_latency", 130)

# ----- htable params -----
# ip ban htable with autoexpire after 5 minutes
modparam("htable", "htable", "ipban=>size=8;autoexpire=300;")
#!endif

# Table for organization data during call
modparam("htable", "htable", "org=>size=11;autoexpire=180;")

#!ifdef WITH_DEBUG
# ----- debugger params -----
modparam("debugger", "cfgtrace", 1)
#!endif

####### Routing Logic ########
request_route {

	# per request initial checks
	route(REQINIT);

	# Answer to options (like ping)
	if ((method==OPTIONS) && (! uri=~"sip:.*[@]+.*")) {
		options_reply();
		exit;
	}

	#!ifdef WITH_MORELOGGING
	xlog("L_INFO", "ROUTE: Start - $rm $fu to $ru ($si:$sp)($ci)\n");
	#!endif

	#!ifdef WITH_HOMER
	# Start duplicate the SIP message now - exclude OPTIONS logging
	sip_trace();
	setflag(22);
	#!endif

	# CANCEL processing
	if (is_method("CANCEL")) {
		if (t_check_trans()) {
			route(RELAY);
		}
		exit;
	}

	# handle requests within SIP dialogs
	route(WITHINDLG);

	### only initial requests (no To tag)

	t_check_trans();

	# record routing for dialog forming requests (in case they are routed)
	# - remove preloaded route headers
	remove_hf("Route");
	if (is_method("INVITE|SUBSCRIBE")) {
		record_route();
	}

	### requests for my local domains

	if ($rU==$null) {
		# request with no Username in RURI
		sl_send_reply("484","Address Incomplete");
		exit;
	}

	route(CHK_E164);

	$var(group) = allow_source_address_group();

	if (($var(group) >= 200) && ($var(group) < 300)) { # Call from Proxy
		#!ifdef WITH_MORELOGGING
		xlog("L_INFO", "ROUTE: INBOUND call from group $var(group)\n");
		#!endif
		
		route(INBOUND);
	} else if (($var(group) >= 300) && ($var(group) < 400)) { # Call from Skype
		#!ifdef WITH_MORELOGGING
		xlog("L_INFO", "ROUTE: OUTBOUND call from group $var(group)\n");
		#!endif
		
		route(CHK_OUTBOUND);
		route(OUTBOUND);
	} else {
		#!ifdef WITH_MORELOGGING
		xlog("L_INFO", "ROUTE: BLOCKED call from group $var(group)\n");
		#!endif
		
		sl_send_reply("403", "Forbidden");
		exit;
	}
}

# Check if number is E164, both inbound and outbound
route[CHK_E164] {
	# If not e164 reject
	if (!($rU =~ "^\+[0-9]+$")) {
		#!ifdef WITH_MORELOGGING
		xlog("L_WARN", "CHK_E164: not a E164 number, reject - $rm from $fu to $du (IP:$si:$sp)($ci)\n");
		#!endif
		
		sl_send_reply("484", "Not a E164 number");
		exit;
	}
}

# Wrapper for relaying requests
route[RELAY] {
	# enable additional event routes for forwarded requests
	# - serial forking, RTP relaying handling, a.s.o.
	if (is_method("INVITE|BYE|SUBSCRIBE|UPDATE")) {
		if(!t_is_set("branch_route")) t_on_branch("MANAGE_BRANCH");
	}

	if (is_method("INVITE|SUBSCRIBE|UPDATE")) {
		if(!t_is_set("onreply_route")) t_on_reply("MANAGE_REPLY");
	}

	if (is_method("INVITE")) {
		if(!t_is_set("failure_route")) t_on_failure("MANAGE_FAILURE");
	}

	if (!t_relay()) {
		sl_reply_error();
	}

	exit;
}

route[INBOUND] {
	#!ifdef WITH_MORELOGGING
	xlog("L_NOTICE", "INBOUND: ($rm) $fu to $ru (IP:$si:$sp)($ci)\n");
	#!endif

	sql_query("ca", "SELECT groupid FROM domain_lookup WHERE domain = '$(ru{uri.domain})'", "ra");
	if ($dbr(ra=>rows) > 0) {
		$var(groupid) = $dbr(ra=>[0,0]);
		sql_result_free("ra");

		if (ds_select_dst($var(groupid), "8")) {
			#!ifdef WITH_MORELOGGING
			xlog("L_INFO", "SkypeGW: Selected dispatch group $var(groupid) Skype - $rm from $fu to $du (IP:$si:$sp)($ci)\n");
			#!endif

			t_on_failure("FAIL_ROUTE");
		} else {
			#!ifdef WITH_MORELOGGING
			xlog("L_WARN", "SkypeGW: Failure in Skype - $rm from $fu to $du (IP:$si:$sp)($ci)\n");
			#!endif

			sl_send_reply("503", "Temporary failure");
			exit;
		}

		# PRACK seems to cause problems
		if($hdr(SUPPORTED) =~ "100rel") {
			remove_hf("SUPPORTED");
		}

		t_on_reply("REPLY_FROM_SKYPE");

		route(RELAY);
		exit;
	} else {
		#!ifdef WITH_MORELOGGING
		xlog("L_WARN", "INBOUND: No routing info for domain - $rm from $fu to $du (IP:$si:$sp)($ci)\n");
		#!endif
		
		sql_result_free("ra");
		sl_send_reply("484", "Missing info for domain");
		exit;
	}		
}

failure_route[FAIL_ROUTE] {
	#!ifdef WITH_MORELOGGING
	xlog("L_INFO", "FAIL_ROUTE: Entered - ($rm) $fu to $ru (IP:$si:$sp)($oP)($ci)\n");
	#!endif

	if (t_is_canceled()) {
		exit;
	}

	# Next destination
	if (t_check_status("5[0-9][0-9]") || (t_branch_timeout() && !t_branch_replied())) {
		xlog("L_NOTICE", "FAIL_ROUTE: FAILURE (IP:$si:$sp)($oP)($ci)\n");

		if(ds_next_dst()) {
			xlog("L_NOTICE", "FAIL_ROUTE: Retargeting to $du (IP:$si:$sp)($oP)($ci)\n");
			t_on_failure("FAIL_ROUTE");
			route(RELAY);
			exit;
		}
	
		xlog("L_WARN", "FAIL_ROUTE: COMPLETE FAILURE - No more targets (IP:$si:$sp)($oP)($ci)\n");
		t_reply("503", "Temporary failure");
		exit;
	}
}

route[CHK_OUTBOUND] {
	#!ifdef WITH_MORELOGGING
	xlog("L_INFO", "CHK_OUTBOUND: $fu to $ru (IP:$si:$sp)($oP)($ci)\n");
	#!endif

	# P-Asserted-Identity is required
	if (!(is_present_hf("P-Asserted-Identity"))) {
		#!ifdef WITH_MORELOGGING
		xlog("L_INFO", "CHK_OUTBOUND: Required field P-Asserted-Identity missing  - $fu to $ru (IP:$si:$sp)($oP)($ci)\n");
		#!endif
		sl_send_reply("484", "Missing required header field P-Asserted-Identity");
		exit;
	}

	# Get forwarder number from History-Info or Referred-By
	if ((is_present_hf("History-Info")) && ($hdr(History-Info) != "")) {
		#!ifdef WITH_MORELOGGING
		xlog("L_INFO", "CHK_OUTBOUND: Using 'History-Info' = '$hdr(History-Info)' and 'P-Asserted-Identity' = '$hdr(P-Asserted-Identity)' for caller organization  - $fu to $ru (IP:$si:$sp)($oP)($ci)\n");
		#!endif

		$sht(org=>$ci::forwarder) =  $(hdr(History-Info){s.select,0,@}{s.strip,5});
	} else if ((is_present_hf("Referred-By")) && ($hdr(Referred-By) != "")) {
		#!ifdef WITH_MORELOGGING
		xlog("L_INFO", "CHK_OUTBOUND: Using 'Referred-By' = '$hdr(Referred-By)' and 'P-Asserted-Identity' = '$hdr(P-Asserted-Identity)' for caller organization  - $fu to $ru (IP:$si:$sp)($oP)($ci)\n");
		#!endif

		$sht(org=>$ci::forwarder) =  $(hdr(Referred-By){s.select,0,@}{s.strip,5});
	}

	# Forwarder domain is billed for call. Try finding domain in carrierroute based on forwarder number
	if ($sht(org=>$ci::forwarder) =~ "^\+[0-9]+$") {
		$var(org_ru) = $ru;
		if (!(cr_route("skype", "pstn", "$sht(org=>$ci::forwarder)", "$sht(org=>$ci::forwarder)", "call_id"))) {
			#!ifdef WITH_MORELOGGING
			xlog("L_NOTICE", "CHK_OUTBOUND: Forwarder '$sht(org=>$ci::forwarder)' not found in carrierroute ($rm) $fu to $ru (IP:$si:$sp)($oP)($ci)\n");
			#!endif
			sl_send_reply("484", "Unable to verify forwarder. Not found in database. Contact administrator.");
			exit;
		}
		$sht(org=>$ci::domain) = $rd;
		$ru = $var(org_ru);
	} else if ($sht(org=>$ci::forwarder) != "") {
		#!ifdef WITH_MORELOGGING
		xlog("L_NOTICE", "CHK_OUTBOUND: Forwarder '$sht(org=>$ci::forwarder)' is not e164 ($rm) $fu to $ru (IP:$si:$sp)($oP)($ci)\n");
		#!endif
		sl_send_reply("484", "Illegal forwarder. Contact administrator.");
		exit;
	}

	# Get number from tel: in PAI if it is set.
	# Example: 'P-Asserted-Identity: "Name Name"<sip:name@example.com>,<tel:+12345678>'
	# Example: 'P-Asserted-Identity: "Name Name"<tel:+12345678>'
	if ($(hdr(P-Asserted-Identity)) =~ "<tel:\+[0-9]+>") {
		$sht(org=>$ci::caller) = $(hdr(P-Asserted-Identity){s.select,1,:}{s.striptail,1});
		$sht(org=>$ci::caller) = $(hdr(P-Asserted-Identity){re.subst,/.*tel://}{s.striptail,1});
	} else {
		$sht(org=>$ci::caller) = $(ai{uri.user});
	}

	# Get display name from PAI
	$sht(org=>$ci::displayname) = $(hdr(P-Asserted-Identity){nameaddr.name});

	# Try finding domain in carrierroute if not forwarded call.
	if (($sht(org=>$ci::domain) == "") && ($sht(org=>$ci::caller) =~ "^\+[0-9]+$")) {
		$var(org_ru) = $ru;
		if (!(cr_route("skype", "pstn", "$sht(org=>$ci::caller)", "$sht(org=>$ci::caller)", "call_id"))) {
			#!ifdef WITH_MORELOGGING
			xlog("L_NOTICE", "CHK_OUTBOUND: Caller '$sht(org=>$ci::caller)' not found in carrierroute. Can't identify caller domain! ($rm) $fu to $ru (IP:$si:$sp)($oP)($ci)\n");
			#!endif
			sl_send_reply("484", "Unable to determine caller domain. Caller number missing from database. Contact administrator.");
			exit;
		}
		$sht(org=>$ci::domain) = $rd;
		$ru = $var(org_ru);
	}

	# If domain is set and caller is number, use as verified for PAI
	if ( ($sht(org=>$ci::domain) != "") && ($sht(org=>$ci::caller) =~ "^\+[0-9]+$") ) {
		$sht(org=>$ci::pai) = "P-Asserted-Identity: " + $sht(org=>$ci::displayname) + "<sip:" + $sht(org=>$ci::caller) + "@" + $sht(org=>$ci::domain) + ">";
	}

	#!ifdef WITH_MORELOGGING
	xlog("L_NOTICE", "PAI: $sht(org=>$ci::pai), DOMAIN: $sht(org=>$ci::domain), CALLER: $sht(org=>$ci::caller)\n");
	#!endif

	if ($sht(org=>$ci::pai) != "") {
		remove_hf("P-Asserted-Identity");
		append_hf("$sht(org=>$ci::pai)\r\n", "Content-Length");
	}
}

route[OUTBOUND] {
	#!ifdef WITH_MORELOGGING
	xlog("L_NOTICE", "OUTBOUND: ($rm) $fu to $ru (IP:$si:$sp)($ci)\n");
	#!endif
	
	sql_query("ca", "SELECT groupid FROM domain_lookup WHERE domain = '$(sht(org=>$ci::domain))'", "ra");

	if ($dbr(ra=>rows) > 0) {
		$var(groupid) = $dbr(ra=>[0,0]);
		sql_result_free("ra");

		if ($var(groupid) == $var(group)) {
			#!ifdef WITH_MORELOGGING
			xlog("L_NOTICE", "OUTBOUND: Found groupid $var(groupid) - ($rm) $fu to $ru (IP:$si:$sp)($ci)\n");
			#!endif

			if (ds_select_dst("200", "8")) {
				#!ifdef WITH_MORELOGGING
				xlog("L_INFO", "DISPATCH: Selected dispatch group $var(groupid) - $rm from $fu to $du (IP:$si:$sp)($oP)($ci)\n");
				#!endif
				t_on_failure("FAIL_ROUTE");
			} else {
				xlog("L_NOTICE", "DISPATCH: Failure in PSTN GW - $rm from $fu to $du (IP:$si:$sp)($oP)($ci)\n");
				sl_send_reply("503", "Temporary failure in PSTN GW");
				exit;
			}

			# There can be trouble with PRACK
			if($hdr(SUPPORTED) =~ "100rel") {
				remove_hf("SUPPORTED");
			}

			remove_hf("User-Agent");
			append_hf("User-Agent: Skype PSTN GW\r\n");

			remove_hf("Privacy");

			# if (is_present_hf("History-Info")) {
			#	remove_hf("History-Info");
			# }

			# if (is_present_hf("Referred-By")) {
			#	remove_hf("Referred-By");
			# }

			t_on_reply("REPLY_TO_SKYPE");

			route(RELAY);
			exit;
		} else {
			sl_send_reply("403", "Mediation unauthorized");
			exit;
		}
	} else {
		sql_result_free("ra");
		sl_send_reply("484", "Known mediation unknown domain");
		exit;
	}
}

# Per SIP request initial checks
route[REQINIT] {
#!ifdef WITH_ANTIFLOOD
	# flood detection from same IP and traffic ban for a while
	# be sure you exclude checking trusted peers, such as pstn gateways
	# - local host excluded (e.g., loop to self)
	if(src_ip!=myself) {
		if($sht(ipban=>$si)!=$null) {
			# ip is already blocked
			xdbg("request from blocked IP - $rm from $fu (IP:$si:$sp)\n");
			exit;
		}
		if (!pike_check_req()) {
			xlog("L_ALERT","ALERT: pike blocking $rm from $fu (IP:$si:$sp)\n");
			$sht(ipban=>$si) = 1;
			exit;
		}
	}
#!endif
	if($ua =~ "friendly-scanner|sipcli|VaxSIPUserAgent") {
		# silent drop for scanners - uncomment next line if want to reply
		# sl_send_reply("200", "OK");
		exit;
	}

	if (!mf_process_maxfwd_header("10")) {
		sl_send_reply("483","Too Many Hops");
		exit;
	}

	if(is_method("OPTIONS") && uri==myself && $rU==$null) {
		sl_send_reply("200","Keepalive");
		exit;
	}

	if(!sanity_check("1511", "7")) {
		xlog("Malformed SIP message from $si:$sp\n");
		exit;
	}
}

# Handle requests within SIP dialogs
route[WITHINDLG] {
	if (!has_totag()) return;

	# sequential request withing a dialog should
	# take the path determined by record-routing
	if (loose_route()) {
		route(DLGURI);
		if (is_method("BYE")) {
			# setflag(FLT_ACC); # do accounting ...
			# setflag(FLT_ACCFAILED); # ... even if the transaction fails
			rtpengine_delete();
		} else if ( is_method("NOTIFY") ) {
			# Add Record-Route for in-dialog NOTIFY as per RFC 6665.
			record_route();
		}
		route(RELAY);
		exit;
	}

	if (is_method("SUBSCRIBE") && uri == myself) {
		exit;
	}

	if ( is_method("ACK") ) {
		if ( t_check_trans() ) {
			# no loose-route, but stateful ACK;
			# must be an ACK after a 487
			# or e.g. 404 from upstream server
			route(RELAY);
			exit;
		} else {
			# ACK without matching transaction ... ignore and discard
			exit;
		}
	}
	sl_send_reply("404","Not here");
	exit;
}

route[DLGURI] {
	if(!isdsturiset()) {
		handle_ruri_alias();
	}
	return;
}

route[SETUP_BRIDGING] {
	#!ifdef WITH_MORELOGGING
	xlog("L_NOTICE", "SETUP_BRIDGING: ($rm) $fu to $ru (IP:$si:$sp)($ci)\n");
	#!endif
	
	rtpengine_manage("trust-address replace-origin replace-session-connection ICE=remove RTP/AVP");
}

# manage outgoing branches
branch_route[MANAGE_BRANCH] {
	#!ifdef WITH_MORELOGGING
	xlog("L_NOTICE", "MANAGE_BRANCH: ($rm) $fu to $ru (IP:$si:$sp)($ci)\n");
	#!endif
	
	route(SETUP_BRIDGING);
}

onreply_route[REPLY_TO_SKYPE] {
	#!ifdef WITH_MORELOGGING
	xlog("L_INFO", "Reply from external peer: $rs");
	#!endif
	
	if(!(status=~"[12][0-9][0-9]")) {
		return;
	}

	rtpengine_manage("trust-address replace-origin replace-session-connection ICE=remove RTP/AVP");
}

onreply_route[REPLY_FROM_SKYPE] {
	#!ifdef WITH_MORELOGGING
	xlog("L_INFO", "Reply from skype: $rs");
	#!endif

	if (status=~"1[0-9][0-9]") {
		# SfB does not have INVITE and ACK as ALLOW in reply, add them
		insert_hf("ALLOW: INVITE\r\n", "SERVER");
		insert_hf("ALLOW: ACK\r\n", "SERVER");
	}

	if(!(status=~"[12][0-9][0-9]")) {
		return;
	}
	
	rtpengine_manage("trust-address replace-origin replace-session-connection ICE=remove RTP/AVP");
}

# manage incoming replies
onreply_route[MANAGE_REPLY] {
	#!ifdef WITH_MORELOGGING
	xlog("L_NOTICE", "MANAGE_REPLY: ($rm) $fu to $ru (IP:$si:$sp)($ci)\n");
	#!endif
}

# manage failure routing cases
failure_route[MANAGE_FAILURE] {
	if (t_is_canceled()) {
		exit;
	}
}

event_route[dispatcher:dst-down] {
	xlog("L_ERR", "Destination down: $rm $ru ($du)\n");
}

event_route[dispatcher:dst-up] {
	xlog("L_ERR", "Destination up: $rm $ru\n");
}
